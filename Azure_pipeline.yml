trigger:
  branches:
    include:
    - main
  paths:
    include:
    - '**/*.tf'
    - '**/*.tfvars.example'
    - 'azure-pipelines.yml'

parameters:
  - name: environment
    displayName: Environment
    type: string
    default: dev
    values:
      - dev
      - test
      - prod

pool:
  vmImage: 'ubuntu-latest'

variables:
  - group: terraform-${{ parameters.environment }}
  - name: TF_WORKSPACE_DIR
    value: '$(System.DefaultWorkingDirectory)'

stages:
- stage: Validate
  jobs:
  - job: ValidateTerraform
    steps:
    - task: TerraformInstaller@0
      displayName: 'Install Terraform'
      inputs:
        terraformVersion: '1.5.7'
    
    - task: TerraformTaskV4@4
      displayName: 'Terraform Init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(TF_WORKSPACE_DIR)'
        backendServiceArm: 'Azure-ServiceConnection-${{ parameters.environment }}'
        backendAzureRmResourceGroupName: '$(BACKEND_RG_NAME)'
        backendAzureRmStorageAccountName: '$(BACKEND_STORAGE_ACCOUNT)'
        backendAzureRmContainerName: '$(BACKEND_CONTAINER)'
        backendAzureRmKey: 'databricks-${{ parameters.environment }}.tfstate'
    
    - task: TerraformTaskV4@4
      displayName: 'Terraform Validate'
      inputs:
        provider: 'azurerm'
        command: 'validate'
        workingDirectory: '$(TF_WORKSPACE_DIR)'
    
    - task: TerraformTaskV4@4
      displayName: 'Terraform Plan'
      inputs:
        provider: 'azurerm'
        command: 'plan'
        workingDirectory: '$(TF_WORKSPACE_DIR)'
        environmentServiceNameAzureRM: 'Azure-ServiceConnection-${{ parameters.environment }}'
        commandOptions: '-var-file=environments/${{ parameters.environment }}.tfvars -out=$(TF_WORKSPACE_DIR)/tfplan'

- stage: Deploy
  dependsOn: Validate
  condition: succeeded()
  jobs:
  - deployment: DeployTerraform
    environment: ${{ parameters.environment }}
    strategy:
      runOnce:
        deploy:
          steps:
          - task: TerraformInstaller@0
            displayName: 'Install Terraform'
            inputs:
              terraformVersion: '1.5.7'
          
          - task: TerraformTaskV4@4
            displayName: 'Terraform Init'
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: '$(TF_WORKSPACE_DIR)'
              backendServiceArm: 'Azure-ServiceConnection-${{ parameters.environment }}'
              backendAzureRmResourceGroupName: '$(BACKEND_RG_NAME)'
              backendAzureRmStorageAccountName: '$(BACKEND_STORAGE_ACCOUNT)'
              backendAzureRmContainerName: '$(BACKEND_CONTAINER)'
              backendAzureRmKey: 'databricks-${{ parameters.environment }}.tfstate'
          
          - task: TerraformTaskV4@4
            displayName: 'Terraform Apply'
            inputs:
              provider: 'azurerm'
              command: 'apply'
              workingDirectory: '$(TF_WORKSPACE_DIR)'
              environmentServiceNameAzureRM: 'Azure-ServiceConnection-${{ parameters.environment }}'
              commandOptions: '$(TF_WORKSPACE_DIR)/tfplan'